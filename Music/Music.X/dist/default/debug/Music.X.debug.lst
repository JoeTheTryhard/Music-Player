

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Jan 05 16:13:47 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	10F200
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	jmp_tab,global,class=ENTRY,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x1C,4
    14      000                     
    15                           ; Version 2.40
    16                           ; Generated 06/12/2021 GMT
    17                           ; 
    18                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC10F200 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50      000                     	;# 
    51      001                     	;# 
    52      002                     	;# 
    53      003                     	;# 
    54      004                     	;# 
    55      005                     	;# 
    56      006                     	;# 
    57      001                     _TMR0	set	1
    58      006                     _GPIO	set	6
    59      000                     _OPTION	set	0
    60      006                     _TRIS	set	6
    61                           
    62                           	psect	cinit
    63      002                     start_initialization:	
    64                           ; #config settings
    65                           
    66      002                     __initialization:
    67      002                     end_of_initialization:	
    68                           ;End of C runtime variable initialization code
    69                           
    70      002                     __end_of__initialization:
    71      002  0064               	clrf	4
    72      003  0A04               	ljmp	_main	;jump to C main() function
    73                           
    74                           	psect	cstackCOMMON
    75      000                     __pcstackCOMMON:
    76      000                     ??_initialize:
    77      000                     ??_toggleSound:	
    78                           ; 1 bytes @ 0x0
    79                           
    80      000                     ??_main:	
    81                           ; 1 bytes @ 0x0
    82                           
    83                           
    84                           	psect	cstackBANK0
    85      010                     __pcstackBANK0:	
    86                           ; 1 bytes @ 0x0
    87                           
    88      010                     ?_initialize:
    89      010                     ?_toggleSound:	
    90                           ; 1 bytes @ 0x0
    91                           
    92      010                     ?_main:	
    93                           ; 1 bytes @ 0x0
    94                           
    95      010                     toggleSound@pinNumber:	
    96                           ; 1 bytes @ 0x0
    97                           
    98                           
    99                           ; 1 bytes @ 0x0
   100      010                     	ds	1
   101      011                     toggleSound@initialTMR0:
   102                           
   103                           ; 1 bytes @ 0x1
   104      011                     	ds	1
   105      012                     toggleSound@track:
   106                           
   107                           ; 1 bytes @ 0x2
   108      012                     	ds	1
   109      013                     main@counter:
   110                           
   111                           ; 2 bytes @ 0x3
   112      013                     	ds	2
   113      015                     main@track1:
   114                           
   115                           ; 2 bytes @ 0x5
   116      015                     	ds	2
   117      017                     main@track2:
   118                           
   119                           ; 2 bytes @ 0x7
   120      017                     	ds	2
   121                           
   122                           	psect	maintext
   123      004                     __pmaintext:	
   124 ;;
   125 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   126 ;;
   127 ;; *************** function _main *****************
   128 ;; Defined at:
   129 ;;		line 29 in file "GuardianTheme.c"
   130 ;; Parameters:    Size  Location     Type
   131 ;;		None
   132 ;; Auto vars:     Size  Location     Type
   133 ;;  track2          2    7[BANK0 ] struct Track
   134 ;;  track1          2    5[BANK0 ] struct Track
   135 ;;  counter         2    3[BANK0 ] unsigned short 
   136 ;; Return value:  Size  Location     Type
   137 ;;                  1   19[None  ] void 
   138 ;; Registers used:
   139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+1, btemp+2, btemp+3, pclath, cstack
   140 ;; Tracked objects:
   141 ;;		On entry : B00/0
   142 ;;		On exit  : 0/0
   143 ;;		Unchanged: 0/0
   144 ;; Data sizes:     COMMON   BANK0
   145 ;;      Params:         0       0
   146 ;;      Locals:         0       6
   147 ;;      Temps:          0       0
   148 ;;      Totals:         0       6
   149 ;;Total ram usage:        6 bytes
   150 ;; Hardware stack levels required when called: 1
   151 ;; This function calls:
   152 ;;		_initialize
   153 ;;		_toggleSound
   154 ;; This function is called by:
   155 ;;		Startup code after reset
   156 ;; This function uses a non-reentrant model
   157 ;;
   158                           
   159      004                     _main:	
   160                           ;psect for function _main
   161                           
   162      004                     l589:	
   163                           ;incstack = 0
   164                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+3+pclath+cstack]
   165                           
   166                           
   167                           ;GuardianTheme.c: 31:     initialize();
   168      004  09FE               	fcall	entry__initialize
   169      005                     l591:
   170                           
   171                           ;GuardianTheme.c: 36:     {;GuardianTheme.c: 37:         counter = 0;
   172      005  0073               	clrf	main@counter
   173      006  0074               	clrf	main@counter+1
   174      007                     l593:
   175                           
   176                           ;GuardianTheme.c: 38:         track1.clocks = 5;
   177      007  0C05               	movlw	5
   178      008  0035               	movwf	main@track1
   179      009                     l595:
   180                           
   181                           ;GuardianTheme.c: 39:         track2.clocks = 6;
   182      009  0C06               	movlw	6
   183      00A  0037               	movwf	main@track2
   184                           
   185                           ;GuardianTheme.c: 40:         while (counter < 65535)
   186      00B  0A20               	goto	l601
   187      00C                     l597:
   188                           
   189                           ;GuardianTheme.c: 41:         {;GuardianTheme.c: 42:             toggleSound(&track1, 0,
      +                           TMR0);
   190      00C  0070               	clrf	toggleSound@pinNumber
   191      00D  0201               	movf	1,w	;volatile
   192      00E  0031               	movwf	toggleSound@initialTMR0
   193      00F  0C15               	movlw	(low (main@track1| 0))& (0+255)
   194      010  09FD               	fcall	entry__toggleSound
   195                           
   196                           ;GuardianTheme.c: 43:             toggleSound(&track2, 1, TMR0);
   197      011  0070               	clrf	toggleSound@pinNumber
   198      012  02B0               	incf	toggleSound@pinNumber,f
   199      013  0201               	movf	1,w	;volatile
   200      014  0031               	movwf	toggleSound@initialTMR0
   201      015  0C17               	movlw	(low (main@track2| 0))& (0+255)
   202      016  09FD               	fcall	entry__toggleSound
   203      017                     l599:
   204                           
   205                           ;GuardianTheme.c: 44:             counter++;
   206      017  0C01               	movlw	1
   207      018  003C               	movwf	btemp
   208      019  007D               	clrf	btemp+1
   209      01A  021C               	movf	wtemp0,w
   210      01B  01F3               	addwf	main@counter,f
   211      01C  0603               	skipnc
   212      01D  02B4               	incf	main@counter+1,f
   213      01E  021D               	movf	wtemp0+1,w
   214      01F  01F4               	addwf	main@counter+1,f
   215      020                     l601:
   216                           
   217                           ;GuardianTheme.c: 40:         while (counter < 65535)
   218      020  0293               	incf	main@counter,w
   219      021  0743               	skipz
   220      022  0A27               	goto	u91
   221      023  0294               	incf	main@counter+1,w
   222      024  0743               	btfss	3,2
   223      025  0A27               	goto	u91
   224      026  0A28               	goto	u90
   225      027                     u91:
   226      027  0A0C               	goto	l597
   227      028                     u90:
   228      028                     l603:
   229                           
   230                           ;GuardianTheme.c: 46:         counter = 0;
   231      028  0073               	clrf	main@counter
   232      029  0074               	clrf	main@counter+1
   233      02A                     l605:
   234                           
   235                           ;GuardianTheme.c: 47:         track1.clocks = 7;
   236      02A  0C07               	movlw	7
   237      02B  0035               	movwf	main@track1
   238      02C                     l607:
   239                           
   240                           ;GuardianTheme.c: 48:         track2.clocks = 8;
   241      02C  0C08               	movlw	8
   242      02D  0037               	movwf	main@track2
   243                           
   244                           ;GuardianTheme.c: 49:         while (counter < 65535)
   245      02E  0A43               	goto	l613
   246      02F                     l609:
   247                           
   248                           ;GuardianTheme.c: 50:         {;GuardianTheme.c: 51:             toggleSound(&track1, 0,
      +                           TMR0);
   249      02F  0070               	clrf	toggleSound@pinNumber
   250      030  0201               	movf	1,w	;volatile
   251      031  0031               	movwf	toggleSound@initialTMR0
   252      032  0C15               	movlw	(low (main@track1| 0))& (0+255)
   253      033  09FD               	fcall	entry__toggleSound
   254                           
   255                           ;GuardianTheme.c: 52:             toggleSound(&track2, 1, TMR0);
   256      034  0070               	clrf	toggleSound@pinNumber
   257      035  02B0               	incf	toggleSound@pinNumber,f
   258      036  0201               	movf	1,w	;volatile
   259      037  0031               	movwf	toggleSound@initialTMR0
   260      038  0C17               	movlw	(low (main@track2| 0))& (0+255)
   261      039  09FD               	fcall	entry__toggleSound
   262      03A                     l611:
   263                           
   264                           ;GuardianTheme.c: 53:             counter++;
   265      03A  0C01               	movlw	1
   266      03B  003C               	movwf	btemp
   267      03C  007D               	clrf	btemp+1
   268      03D  021C               	movf	wtemp0,w
   269      03E  01F3               	addwf	main@counter,f
   270      03F  0603               	skipnc
   271      040  02B4               	incf	main@counter+1,f
   272      041  021D               	movf	wtemp0+1,w
   273      042  01F4               	addwf	main@counter+1,f
   274      043                     l613:
   275                           
   276                           ;GuardianTheme.c: 49:         while (counter < 65535)
   277      043  0293               	incf	main@counter,w
   278      044  0743               	skipz
   279      045  0A4A               	goto	u101
   280      046  0294               	incf	main@counter+1,w
   281      047  0743               	btfss	3,2
   282      048  0A4A               	goto	u101
   283      049  0A4B               	goto	u100
   284      04A                     u101:
   285      04A  0A2F               	goto	l609
   286      04B                     u100:
   287      04B  0A05               	goto	l591
   288      04C  0A01               	ljmp	start
   289      04D                     __end_of_main:
   290                           
   291                           	psect	text1
   292      04D                     __ptext1:	
   293 ;; *************** function _toggleSound *****************
   294 ;; Defined at:
   295 ;;		line 24 in file "./MusicPlayer.h"
   296 ;; Parameters:    Size  Location     Type
   297 ;;  track           1    wreg     PTR struct Track
   298 ;;		 -> main@track2(2), main@track1(2), 
   299 ;;  pinNumber       1    0[BANK0 ] unsigned char 
   300 ;;  initialTMR0     1    1[BANK0 ] unsigned char 
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  track           1    2[BANK0 ] PTR struct Track
   303 ;;		 -> main@track2(2), main@track1(2), 
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    0[BANK0 ] void 
   306 ;; Registers used:
   307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+2, btemp+3
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMMON   BANK0
   313 ;;      Params:         0       2
   314 ;;      Locals:         0       1
   315 ;;      Temps:          0       0
   316 ;;      Totals:         0       3
   317 ;;Total ram usage:        3 bytes
   318 ;; Hardware stack levels used: 1
   319 ;; This function calls:
   320 ;;		Nothing
   321 ;; This function is called by:
   322 ;;		_main
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326      04D                     _toggleSound:	
   327                           ;psect for function _toggleSound
   328                           
   329                           
   330                           ;toggleSound@track stored from wreg
   331      04D  0032               	movwf	toggleSound@track
   332      04E                     l579:
   333                           
   334                           ;./MusicPlayer.h: 24: void toggleSound(struct Track* track, unsigned char pinNumber, uns
      +                          igned char initialTMR0);./MusicPlayer.h: 25: {;./MusicPlayer.h: 26:     if (initialTMR0 
      +                          == (unsigned char)((*track).lastTimeUpdate+((*track).clocks)) && (*track).clocks !=0)
   335      04E  0211               	movf	toggleSound@initialTMR0,w
   336      04F  003F               	movwf	btemp+3
   337      050  0212               	movf	toggleSound@track,w
   338      051  0024               	movwf	4
   339      052  0200               	movf	0,w
   340      053  003E               	movwf	btemp+2
   341      054  0212               	movf	toggleSound@track,w
   342      055  003C               	movwf	btemp
   343      056  0C01               	movlw	1
   344      057  01DC               	addwf	btemp,w
   345      058  0024               	movwf	4
   346      059  0200               	movf	0,w
   347      05A  01DE               	addwf	btemp+2,w
   348      05B  019F               	xorwf	btemp+3,w
   349      05C  0743               	skipz
   350      05D  0A5F               	goto	u61
   351      05E  0A60               	goto	u60
   352      05F                     u61:
   353      05F  0A7F               	goto	l15
   354      060                     u60:
   355      060                     l581:
   356      060  0212               	movf	toggleSound@track,w
   357      061  0024               	movwf	4
   358      062  0200               	movf	0,w
   359      063  0643               	btfsc	3,2
   360      064  0A66               	goto	u71
   361      065  0A67               	goto	u70
   362      066                     u71:
   363      066  0A7F               	goto	l15
   364      067                     u70:
   365      067                     l583:
   366                           
   367                           ;./MusicPlayer.h: 27:     {;./MusicPlayer.h: 28:         GPIO ^= 1UL << pinNumber;
   368      067  0290               	incf	toggleSound@pinNumber,w
   369      068  003F               	movwf	btemp+3
   370      069  0C01               	movlw	1
   371      06A  003E               	movwf	btemp+2
   372      06B  0A6E               	goto	u84
   373      06C                     u85:
   374      06C  0403               	clrc
   375      06D  037E               	rlf	btemp+2,f
   376      06E                     u84:
   377      06E  02FF               	decfsz	btemp+3,f
   378      06F  0A6C               	goto	u85
   379      070  021E               	movf	btemp+2,w
   380      071  003F               	movwf	btemp+3
   381      072  021F               	movf	btemp+3,w
   382      073  01A6               	xorwf	6,f	;volatile
   383      074                     l585:
   384                           
   385                           ;./MusicPlayer.h: 29:         TMR0 = initialTMR0;
   386      074  0211               	movf	toggleSound@initialTMR0,w
   387      075  0021               	movwf	1	;volatile
   388      076                     l587:
   389                           
   390                           ;./MusicPlayer.h: 30:         (*track).lastTimeUpdate = initialTMR0;
   391      076  0211               	movf	toggleSound@initialTMR0,w
   392      077  003F               	movwf	btemp+3
   393      078  0212               	movf	toggleSound@track,w
   394      079  003C               	movwf	btemp
   395      07A  0C01               	movlw	1
   396      07B  01DC               	addwf	btemp,w
   397      07C  0024               	movwf	4
   398      07D  021F               	movf	btemp+3,w
   399      07E  0020               	movwf	0
   400      07F                     l15:
   401      07F  0800               	retlw	0
   402      080                     __end_of_toggleSound:
   403                           
   404                           	psect	jmp_tab
   405      0FD                     __pjmp_tab:	
   406                           ;incstack = 0
   407                           ; Regs used in _toggleSound: [wreg-fsr0h+status,2-btemp+0+btemp+2+btemp+3]
   408                           
   409      0FD                     entry__toggleSound:
   410      0FD  0A4D               	ljmp	_toggleSound
   411      0FE                     entry__initialize:	
   412                           ;incstack = 0
   413                           ; Regs used in _initialize: [wreg]
   414                           
   415      0FE  0A80               	ljmp	_initialize
   416                           
   417                           	psect	text2
   418      080                     __ptext2:	
   419 ;; *************** function _initialize *****************
   420 ;; Defined at:
   421 ;;		line 11 in file "./MusicPlayer.h"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1   10[None  ] void 
   428 ;; Registers used:
   429 ;;		wreg
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0
   435 ;;      Params:         0       0
   436 ;;      Locals:         0       0
   437 ;;      Temps:          0       0
   438 ;;      Totals:         0       0
   439 ;;Total ram usage:        0 bytes
   440 ;; Hardware stack levels used: 1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448      080                     _initialize:	
   449                           ;psect for function _initialize
   450                           
   451      080                     l577:
   452                           
   453                           ;./MusicPlayer.h: 13:     TRIS = 0b1000;
   454      080  0C08               	movlw	8
   455      081  0006               	tris	6
   456                           
   457                           ;./MusicPlayer.h: 14:     OPTION = 0b11010100;
   458      082  0CD4               	movlw	212
   459      083  0002               	option
   460      084                     l11:
   461      084  0800               	retlw	0
   462      085                     __end_of_initialize:
   463      01C                     btemp	set	28	;btemp
   464      01C                     wtemp0	set	28
   465      01E                     wtemp1	set	30
   466      01C                     ttemp0	set	28
   467      01C                     ltemp0	set	28
   468                           
   469                           	psect	idloc
   470                           
   471                           ;Config register IDLOC0 @ 0x100
   472                           ;	unspecified, using default values
   473      100                     	org	256
   474      100  0FFF               	dw	4095
   475                           
   476                           ;Config register IDLOC1 @ 0x101
   477                           ;	unspecified, using default values
   478      101                     	org	257
   479      101  0FFF               	dw	4095
   480                           
   481                           ;Config register IDLOC2 @ 0x102
   482                           ;	unspecified, using default values
   483      102                     	org	258
   484      102  0FFF               	dw	4095
   485                           
   486                           ;Config register IDLOC3 @ 0x103
   487                           ;	unspecified, using default values
   488      103                     	org	259
   489      103  0FFF               	dw	4095
   490                           
   491                           	psect	config
   492                           
   493                           ;Config register CONFIG @ 0xFFF
   494                           ;	Oscillator
   495                           ;	OSC = 0x1, unprogrammed default
   496                           ;	Watchdog Timer
   497                           ;	WDTE = OFF, WDT disabled
   498                           ;	Code Protect
   499                           ;	CP = OFF, Code protection off
   500                           ;	Master Clear Enable
   501                           ;	MCLRE = ON, GP3/MCLR pin function  is MCLR
   502      FFF                     	org	4095
   503      FFF  0FFB               	dw	4091

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            14      9       9

Pointer List with Targets:

    toggleSound@track	PTR struct Track size(1) Largest target is 2
		 -> main@track2(BANK0[2]), main@track1(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_toggleSound

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     934
                                              3 BANK0      6     6      0
                         _initialize
                        _toggleSound
 ---------------------------------------------------------------------------------
 (1) _toggleSound                                          3     1      2     784
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
   _toggleSound

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0                E      9       9       3       64.3%
ABS                  0      0       0       4        0.0%
DATA                 0      0       0       5        0.0%
BITBANK0             E      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Jan 05 16:13:47 2023

                     l11 0084                       l15 007F                       u60 0060  
                     u61 005F                       u70 0067                       u71 0066  
                     u90 0028                       u91 0027                       u84 006E  
                     u85 006C                       fsr 0004                      l601 0020  
                    l611 003A                      l603 0028                      l613 0043  
                    l605 002A                      l607 002C                      l609 002F  
                    l581 0060                      l583 0067                      l591 0005  
                    l577 0080                      l585 0074                      l593 0007  
                    l587 0076                      l579 004E                      l595 0009  
                    l597 000C                      l589 0004                      l599 0017  
                    u100 004B                      u101 004A                      fsr0 0004  
                    indf 0000                     _GPIO 0006              main@counter 0013  
                   _TMR0 0001                     _TRIS 0006                     _main 0004  
                   btemp 001C                     start 0001                    ?_main 0010  
                  ltemp0 001C                    ttemp0 001C                    status 0003  
                  wtemp0 001C                    wtemp1 001E   toggleSound@initialTMR0 0011  
        __initialization 0002             __end_of_main 004D                   ??_main 0000  
                 _OPTION 0000  __end_of__initialization 0002             ?_toggleSound 0010  
         __pcstackCOMMON 0000     toggleSound@pinNumber 0010               __pmaintext 0004  
             _initialize 0080                  __ptext1 004D                  __ptext2 0080  
   end_of_initialization 0002               main@track1 0015               main@track2 0017  
      entry__toggleSound 00FD              ?_initialize 0010      start_initialization 0002  
              ___latbits 0000            __pcstackBANK0 0010         toggleSound@track 0012  
              __pjmp_tab 00FD         entry__initialize 00FE            ??_toggleSound 0000  
           ??_initialize 0000       __end_of_initialize 0085      __end_of_toggleSound 0080  
            _toggleSound 004D  
