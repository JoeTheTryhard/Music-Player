

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 30 19:25:33 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	10F200
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	jmp_tab,global,class=ENTRY,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x1C,4
    15      000                     
    16                           ; Version 2.40
    17                           ; Generated 06/12/2021 GMT
    18                           ; 
    19                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC10F200 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51      000                     	;# 
    52      001                     	;# 
    53      002                     	;# 
    54      003                     	;# 
    55      004                     	;# 
    56      005                     	;# 
    57      006                     	;# 
    58      001                     _TMR0	set	1
    59      006                     _GPIO	set	6
    60      000                     _OPTION	set	0
    61      006                     _TRIS	set	6
    62                           
    63                           	psect	cinit
    64      001                     start_initialization:	
    65                           ; #config settings
    66                           
    67      001                     __initialization:
    68                           
    69                           ; Clear objects allocated to BANK0
    70      001  0077               	clrf	__pbssBANK0& (0+31)
    71      002  0078               	clrf	(__pbssBANK0+1)& (0+31)
    72      003  0079               	clrf	(__pbssBANK0+2)& (0+31)
    73      004  007A               	clrf	(__pbssBANK0+3)& (0+31)
    74      005                     end_of_initialization:	
    75                           ;End of C runtime variable initialization code
    76                           
    77      005                     __end_of__initialization:
    78      005  0064               	clrf	4
    79      006  0A33               	ljmp	_main	;jump to C main() function
    80                           
    81                           	psect	bssBANK0
    82      017                     __pbssBANK0:
    83      017                     main@F157:
    84      017                     	ds	2
    85      019                     main@F155:
    86      019                     	ds	2
    87                           
    88                           	psect	cstackCOMMON
    89      000                     __pcstackCOMMON:
    90      000                     ??_initialize:
    91      000                     ??_toggleSound:	
    92                           ; 1 bytes @ 0x0
    93                           
    94      000                     ??_main:	
    95                           ; 1 bytes @ 0x0
    96                           
    97                           
    98                           	psect	cstackBANK0
    99      010                     __pcstackBANK0:	
   100                           ; 1 bytes @ 0x0
   101                           
   102      010                     ?_initialize:
   103      010                     ?_toggleSound:	
   104                           ; 1 bytes @ 0x0
   105                           
   106      010                     ?_main:	
   107                           ; 1 bytes @ 0x0
   108                           
   109      010                     toggleSound@pinNumber:	
   110                           ; 1 bytes @ 0x0
   111                           
   112                           
   113                           ; 1 bytes @ 0x0
   114      010                     	ds	1
   115      011                     toggleSound@initialTMR0:
   116                           
   117                           ; 1 bytes @ 0x1
   118      011                     	ds	1
   119      012                     toggleSound@sound:
   120                           
   121                           ; 1 bytes @ 0x2
   122      012                     	ds	1
   123      013                     main@track1:
   124                           
   125                           ; 2 bytes @ 0x3
   126      013                     	ds	2
   127      015                     main@track2:
   128                           
   129                           ; 2 bytes @ 0x5
   130      015                     	ds	2
   131                           
   132                           	psect	maintext
   133      033                     __pmaintext:	
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   136 ;;
   137 ;; *************** function _main *****************
   138 ;; Defined at:
   139 ;;		line 49 in file "main.c"
   140 ;; Parameters:    Size  Location     Type
   141 ;;		None
   142 ;; Auto vars:     Size  Location     Type
   143 ;;  track2          2    5[BANK0 ] struct Sound
   144 ;;  track1          2    3[BANK0 ] struct Sound
   145 ;; Return value:  Size  Location     Type
   146 ;;                  1   19[None  ] void 
   147 ;; Registers used:
   148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+2, btemp+3, pclath, cstack
   149 ;; Tracked objects:
   150 ;;		On entry : B00/0
   151 ;;		On exit  : 0/0
   152 ;;		Unchanged: 0/0
   153 ;; Data sizes:     COMMON   BANK0
   154 ;;      Params:         0       0
   155 ;;      Locals:         0       4
   156 ;;      Temps:          0       0
   157 ;;      Totals:         0       4
   158 ;;Total ram usage:        4 bytes
   159 ;; Hardware stack levels required when called: 1
   160 ;; This function calls:
   161 ;;		_initialize
   162 ;;		_toggleSound
   163 ;; This function is called by:
   164 ;;		Startup code after reset
   165 ;; This function uses a non-reentrant model
   166 ;;
   167                           
   168      033                     _main:	
   169                           ;psect for function _main
   170                           
   171      033                     l575:	
   172                           ;incstack = 0
   173                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+0+btemp+2+btemp+3+pclath+cstack]
   174                           
   175                           
   176                           ;main.c: 51:     initialize();
   177      033  09FE               	fcall	entry__initialize
   178      034                     l577:
   179                           
   180                           ;main.c: 52:     struct Sound track1 = {50, TMR0};
   181      034  021A               	movf	main@F155+1,w
   182      035  0034               	movwf	main@track1+1
   183      036  0219               	movf	main@F155,w
   184      037  0033               	movwf	main@track1
   185      038                     l579:
   186      038  0C32               	movlw	50
   187      039  0033               	movwf	main@track1
   188      03A                     l581:
   189      03A  0201               	movf	1,w	;volatile
   190      03B  0034               	movwf	main@track1+1
   191      03C                     l583:
   192                           
   193                           ;main.c: 53:     struct Sound track2 = {100, TMR0};
   194      03C  0218               	movf	main@F157+1,w
   195      03D  0036               	movwf	main@track2+1
   196      03E  0217               	movf	main@F157,w
   197      03F  0035               	movwf	main@track2
   198      040                     l585:
   199      040  0C64               	movlw	100
   200      041  0035               	movwf	main@track2
   201      042                     l587:
   202      042  0201               	movf	1,w	;volatile
   203      043  0036               	movwf	main@track2+1
   204      044                     l589:
   205                           
   206                           ;main.c: 55:     {;main.c: 56:         toggleSound(&track1, 0, TMR0);
   207      044  0070               	clrf	toggleSound@pinNumber
   208      045  0201               	movf	1,w	;volatile
   209      046  0031               	movwf	toggleSound@initialTMR0
   210      047  0C13               	movlw	(low (main@track1| 0))& (0+255)
   211      048  09FD               	fcall	entry__toggleSound
   212      049                     l591:
   213                           
   214                           ;main.c: 57:         toggleSound(&track2, 1, TMR0);
   215      049  0070               	clrf	toggleSound@pinNumber
   216      04A  02B0               	incf	toggleSound@pinNumber,f
   217      04B  0201               	movf	1,w	;volatile
   218      04C  0031               	movwf	toggleSound@initialTMR0
   219      04D  0C15               	movlw	(low (main@track2| 0))& (0+255)
   220      04E  09FD               	fcall	entry__toggleSound
   221      04F  0A44               	goto	l589
   222      050  0A00               	ljmp	start
   223      051                     __end_of_main:
   224                           
   225                           	psect	text1
   226      007                     __ptext1:	
   227 ;; *************** function _toggleSound *****************
   228 ;; Defined at:
   229 ;;		line 38 in file "main.c"
   230 ;; Parameters:    Size  Location     Type
   231 ;;  sound           1    wreg     PTR struct Sound
   232 ;;		 -> main@track2(2), main@track1(2), 
   233 ;;  pinNumber       1    0[BANK0 ] unsigned char 
   234 ;;  initialTMR0     1    1[BANK0 ] unsigned char 
   235 ;; Auto vars:     Size  Location     Type
   236 ;;  sound           1    2[BANK0 ] PTR struct Sound
   237 ;;		 -> main@track2(2), main@track1(2), 
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    0[BANK0 ] void 
   240 ;; Registers used:
   241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+2, btemp+3
   242 ;; Tracked objects:
   243 ;;		On entry : 0/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMMON   BANK0
   247 ;;      Params:         0       2
   248 ;;      Locals:         0       1
   249 ;;      Temps:          0       0
   250 ;;      Totals:         0       3
   251 ;;Total ram usage:        3 bytes
   252 ;; Hardware stack levels used: 1
   253 ;; This function calls:
   254 ;;		Nothing
   255 ;; This function is called by:
   256 ;;		_main
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260      007                     _toggleSound:	
   261                           ;psect for function _toggleSound
   262                           
   263                           
   264                           ;toggleSound@sound stored from wreg
   265      007  0032               	movwf	toggleSound@sound
   266      008                     l567:
   267                           
   268                           ;main.c: 38: void toggleSound(struct Sound* sound, unsigned char pinNumber, unsigned cha
      +                          r initialTMR0);main.c: 39: {;main.c: 40:     if (initialTMR0 == (unsigned char)((*sound)
      +                          .lastTimeUpdate+((*sound).clocks)))
   269      008  0211               	movf	toggleSound@initialTMR0,w
   270      009  003F               	movwf	btemp+3
   271      00A  0212               	movf	toggleSound@sound,w
   272      00B  0024               	movwf	4
   273      00C  0200               	movf	0,w
   274      00D  003E               	movwf	btemp+2
   275      00E  0212               	movf	toggleSound@sound,w
   276      00F  003C               	movwf	btemp
   277      010  0C01               	movlw	1
   278      011  01DC               	addwf	btemp,w
   279      012  0024               	movwf	4
   280      013  0200               	movf	0,w
   281      014  01DE               	addwf	btemp+2,w
   282      015  019F               	xorwf	btemp+3,w
   283      016  0743               	skipz
   284      017  0A19               	goto	u31
   285      018  0A1A               	goto	u30
   286      019                     u31:
   287      019  0A32               	goto	l15
   288      01A                     u30:
   289      01A                     l569:
   290                           
   291                           ;main.c: 41:     {;main.c: 42:         GPIO ^= 1UL << pinNumber;
   292      01A  0290               	incf	toggleSound@pinNumber,w
   293      01B  003F               	movwf	btemp+3
   294      01C  0C01               	movlw	1
   295      01D  003E               	movwf	btemp+2
   296      01E  0A21               	goto	u44
   297      01F                     u45:
   298      01F  0403               	clrc
   299      020  037E               	rlf	btemp+2,f
   300      021                     u44:
   301      021  02FF               	decfsz	btemp+3,f
   302      022  0A1F               	goto	u45
   303      023  021E               	movf	btemp+2,w
   304      024  003F               	movwf	btemp+3
   305      025  021F               	movf	btemp+3,w
   306      026  01A6               	xorwf	6,f	;volatile
   307      027                     l571:
   308                           
   309                           ;main.c: 43:         TMR0 = initialTMR0;
   310      027  0211               	movf	toggleSound@initialTMR0,w
   311      028  0021               	movwf	1	;volatile
   312      029                     l573:
   313                           
   314                           ;main.c: 44:         (*sound).lastTimeUpdate = initialTMR0;
   315      029  0211               	movf	toggleSound@initialTMR0,w
   316      02A  003F               	movwf	btemp+3
   317      02B  0212               	movf	toggleSound@sound,w
   318      02C  003C               	movwf	btemp
   319      02D  0C01               	movlw	1
   320      02E  01DC               	addwf	btemp,w
   321      02F  0024               	movwf	4
   322      030  021F               	movf	btemp+3,w
   323      031  0020               	movwf	0
   324      032                     l15:
   325      032  0800               	retlw	0
   326      033                     __end_of_toggleSound:
   327                           
   328                           	psect	jmp_tab
   329      0FD                     __pjmp_tab:	
   330                           ;incstack = 0
   331                           ; Regs used in _toggleSound: [wreg-fsr0h+status,2-btemp+0+btemp+2+btemp+3]
   332                           
   333      0FD                     entry__toggleSound:
   334      0FD  0A07               	ljmp	_toggleSound
   335      0FE                     entry__initialize:	
   336                           ;incstack = 0
   337                           ; Regs used in _initialize: [wreg]
   338                           
   339      0FE  0A51               	ljmp	_initialize
   340                           
   341                           	psect	text2
   342      051                     __ptext2:	
   343 ;; *************** function _initialize *****************
   344 ;; Defined at:
   345 ;;		line 26 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1   10[None  ] void 
   352 ;; Registers used:
   353 ;;		wreg
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0
   359 ;;      Params:         0       0
   360 ;;      Locals:         0       0
   361 ;;      Temps:          0       0
   362 ;;      Totals:         0       0
   363 ;;Total ram usage:        0 bytes
   364 ;; Hardware stack levels used: 1
   365 ;; This function calls:
   366 ;;		Nothing
   367 ;; This function is called by:
   368 ;;		_main
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372      051                     _initialize:	
   373                           ;psect for function _initialize
   374                           
   375      051                     l565:
   376                           
   377                           ;main.c: 28:     TRIS = 0b1000;
   378      051  0C08               	movlw	8
   379      052  0006               	tris	6
   380                           
   381                           ;main.c: 29:     OPTION = 0b11010101;
   382      053  0CD5               	movlw	213
   383      054  0002               	option
   384      055                     l11:
   385      055  0800               	retlw	0
   386      056                     __end_of_initialize:
   387      01C                     btemp	set	28	;btemp
   388      01C                     wtemp0	set	28
   389      01E                     wtemp1	set	30
   390      01C                     ttemp0	set	28
   391      01C                     ltemp0	set	28
   392                           
   393                           	psect	idloc
   394                           
   395                           ;Config register IDLOC0 @ 0x100
   396                           ;	unspecified, using default values
   397      100                     	org	256
   398      100  0FFF               	dw	4095
   399                           
   400                           ;Config register IDLOC1 @ 0x101
   401                           ;	unspecified, using default values
   402      101                     	org	257
   403      101  0FFF               	dw	4095
   404                           
   405                           ;Config register IDLOC2 @ 0x102
   406                           ;	unspecified, using default values
   407      102                     	org	258
   408      102  0FFF               	dw	4095
   409                           
   410                           ;Config register IDLOC3 @ 0x103
   411                           ;	unspecified, using default values
   412      103                     	org	259
   413      103  0FFF               	dw	4095
   414                           
   415                           	psect	config
   416                           
   417                           ;Config register CONFIG @ 0xFFF
   418                           ;	Oscillator
   419                           ;	OSC = 0x1, unprogrammed default
   420                           ;	Watchdog Timer
   421                           ;	WDTE = OFF, WDT disabled
   422                           ;	Code Protect
   423                           ;	CP = OFF, Code protection off
   424                           ;	Master Clear Enable
   425                           ;	MCLRE = ON, GP3/MCLR pin function  is MCLR
   426      FFF                     	org	4095
   427      FFF  0FFB               	dw	4091

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            14      7      11

Pointer List with Targets:

    toggleSound@sound	PTR struct Sound size(1) Largest target is 2
		 -> main@track2(BANK0[2]), main@track1(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_toggleSound

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     562
                                              3 BANK0      4     4      0
                         _initialize
                        _toggleSound
 ---------------------------------------------------------------------------------
 (1) _toggleSound                                          3     1      2     458
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
   _toggleSound

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0                E      7       B       3       78.6%
ABS                  0      0       B       4        0.0%
DATA                 0      0       B       5        0.0%
BITBANK0             E      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 30 19:25:33 2022

                     l11 0055                       l15 0032                       u30 001A  
                     u31 0019                       u44 0021                       u45 001F  
                     fsr 0004                      l571 0027                      l565 0051  
                    l573 0029                      l581 003A                      l567 0008  
                    l591 0049                      l583 003C                      l575 0033  
                    l569 001A                      l585 0040                      l577 0034  
                    l587 0042                      l579 0038                      l589 0044  
                    fsr0 0004                      indf 0000                     _GPIO 0006  
                   _TMR0 0001                     _TRIS 0006                     _main 0033  
                   btemp 001C                     start 0000                    ?_main 0010  
                  ltemp0 001C                    ttemp0 001C                    wtemp0 001C  
                  wtemp1 001E   toggleSound@initialTMR0 0011          __initialization 0001  
           __end_of_main 0051                   ??_main 0000                   _OPTION 0000  
__end_of__initialization 0005             ?_toggleSound 0010           __pcstackCOMMON 0000  
   toggleSound@pinNumber 0010               __pbssBANK0 0017               __pmaintext 0033  
             _initialize 0051                  __ptext1 0007                  __ptext2 0051  
   end_of_initialization 0005               main@track1 0013               main@track2 0015  
      entry__toggleSound 00FD              ?_initialize 0010      start_initialization 0001  
              ___latbits 0000            __pcstackBANK0 0010         toggleSound@sound 0012  
              __pjmp_tab 00FD         entry__initialize 00FE            ??_toggleSound 0000  
           ??_initialize 0000       __end_of_initialize 0056                 main@F155 0019  
               main@F157 0017      __end_of_toggleSound 0033              _toggleSound 0007  
